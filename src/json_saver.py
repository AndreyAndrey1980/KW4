import json

from config import DATA
from src.abstract_json_saver import abstract_json_saver


class json_saver(abstract_json_saver):

    """
    Определение метода класса, который сохраняет данные в файл.
    data — список данных, которые нужно сохранить;
    DATA — путь к файлу, в который будут записаны данные.
    
    Метод использует модуль json для преобразования списка data в строку и записи этой строки в файл с помощью функции write().
    Параметр indent=2 указывает на то, что при преобразовании в строку элементы списка будут иметь отступ в два пробела.
    Параметр ensure_ascii=False позволяет сохранять символы, отличные от ASCII, без изменений.
    """
    def save_file(self, data: list):
        """Save file"""
        with open(DATA, 'w', encoding='utf-8') as file:
            file.write(json.dumps(data, indent=2, ensure_ascii=False))

    """
    Определение метода класса, который считывает данные из файла с помощью модуля json.
    В методе используется контекстный менеджер with, который автоматически закрывает файл после выполнения кода в блоке.
    
    Предполагается, что у вас есть переменная DATA, которая содержит путь к файлу.
    Метод возвращает данные, которые были считаны из файла.
    Для корректной работы метода необходимо импортировать модуль json и определить переменную DATA.
    """
    def read_file(self):
        """Read file"""
        with open(DATA, encoding='utf-8') as file:
            return json.load(file)

    """
    Это похоже на функцию, которая добавляет новую вакансию в файл. Она принимает список данных о вакансии и выполняет следующие действия:
    1. Считывает содержимое файла в переменную old_list.
    2. Объединяет полученный список с новым списком data и сохраняет результат в переменной new_list.
    3. Записывает содержимое переменной new_list в файл с помощью функции save_file().
    """
    def add_vacancy_to_file(self, data: list):
        old_list = self.read_file()
        new_list = data + old_list
        self.save_file(new_list)

    """
    vacancy — название вакансии, которую нужно удалить.
    
    Метод read_file() считывает данные из файла и возвращает их в виде списка словарей.
    В цикле for происходит перебор элементов списка old_list.
    Если название текущей вакансии (params['name']) не совпадает с названием удаляемой вакансии (vacancy), то словарь с вакансией добавляется в новый список new_list.
    
    После завершения цикла новый список сохраняется в файл методом save_file(new_list).
    Это общий принцип работы функции. Для более точного понимания необходимо знать контекст её использования.
    """
    def delete_vacancy(self, vacancy: str):
        new_list = []

        old_list = self.read_file()

        for params in old_list:
            if params['name'] != vacancy:
                new_list.append(params)

        self.save_file(new_list)
